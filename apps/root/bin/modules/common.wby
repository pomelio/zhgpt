import std.array as array;
import ext.mustache as mch;
import ext.github as github;
import ext.mustache as mch;
import ext.markdownit as md;
import std.date as dt;
import ext.web as web;
import std.string as str;

fn render_comments_html(clazz, doc, users) {
  let comments = [];

  let comments_json = github.get_global_content('/comments.json');
  if comments_json {
    comments = parse_json(comments_json);
  }

  comments = array.filter(comments, |c| => c['clazz'] == clazz && c['doc'] == doc);

  let comments_html = [];

  mch.init_global('/template/comment.mustache');
  let comments_count = len(comments);

  for (let i = 0; i < comments_count; i++) {
    let comment = comments[i];
    let md_comment_result = md.render_source(comment['value']);
    let comment_content = md.get_html(md_comment_result);
    let metas = md.get_metas(md_comment_result);
    let comment_time = dt.from_now(dt.from_number(comment['create_time']));
    let user = array.find(users, |u| => u['id'] == comment['user_id']);
    let comment_html = mch.render();
    array.push(comments_html, comment_html);
  }

  return array.join(comments_html, '');
}

fn render_foot_html(project) {
  let footer_links = [];

  if project['footer']['links'] {
      let f_links = project['footer']['links'];
      let keys = keys(f_links);
      array.for_each(keys, |k| => {
          let title = k;
          let url = f_links[k];
        
          array.push(footer_links, {
              title, url
          });
    });
  }

  return mch.render_global_template('/template/footer.mustache');
}

fn render_sidebar(app) {

    let links = [];

    if app['navi'] {
        let navi = app['navi'];
        let keys = keys(navi);
        array.for_each(keys, |k| => {
            let title = k;
            let url = navi[k];
            let active = false;

            array.push(links, {
                title, url, active
            });
        });
    }

    return mch.render_template('/template/sidebar.mustache');
}


fn get_doc_name(web_path) {

  let fidx = str.last_index_of(web_path, '/');
  if fidx == -1 {
    throw({
      message: 'markdown not found.'
    });
  }
  return str.substring(web_path, fidx + 1);
}

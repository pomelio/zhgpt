import ext.github as github;
import ext.web as web;
import std.array as array;
import ext.mustache as mch;
import std.math as math;
import std.number as number;
import modules.common as common;

let PAGE_SIZE = 20;

let query = web.query();
let page = 0;
if query['page'] {
  page = number.parse_int(query['page']);
}

let project = {};
let project_json = github.get_global_content('/project.json');
if project_json {
    project = parse_json(project_json);
}

let app = {};
let app_json = github.get_app_content('/app.json');
if app_json {
  app = parse_json(app_json);
}

let side_bar_html = common.render_sidebar(app);

let users_path = '/users.json';
let users = [];

let users_json = github.get_global_content(users_path);
if users_json {
  users = parse_json(users_json);
}

let users_count = len(users);
let offset = page * PAGE_SIZE;

let end = offset + PAGE_SIZE;

if end > users_count {
    end = users_count;
}

let users_count = len(users);
users = array.slice(users, offset, end);

mch.init('/template/user/user_card.mustache');

let users_html = [];

for (let i = 0; i < users_count; i++) {
  let user = users[i];
  
  let user_html = mch.render();
  array.push(users_html, user_html);
}

users_html = array.join(users_html, '');

let page_count = math.floor(users_count / PAGE_SIZE) + 1;


let header_html = mch.render_global_template('/template/header.mustache');
let footer_html = common.render_foot_html(project);

let html = mch.render_template('/template/user/users.mustache');

web.body(html);
